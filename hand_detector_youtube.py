#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Ïú†ÌäúÎ∏å ÎßÅÌÅ¨Ïùò ÏòÅÏÉÅÏùÑ ÏûêÎèôÏúºÎ°ú Îã§Ïö¥Î°úÎìúÌï¥
MediaPipe HandsÎ°ú ÏÜêÏùÑ ÌÉêÏßÄ/ÏãúÍ∞ÅÌôîÌïòÎäî ÏòàÏ†ú.

ÏÇ¨Ïö©Î≤ï:
    python hand_detector_youtube.py "https://www.youtube.com/watch?v=ÏòÅÏÉÅID"
"""

import os
import sys
import cv2
import mediapipe as mp
from yt_dlp import YoutubeDL

# ============================
# üîΩ Ïú†ÌäúÎ∏å Îã§Ïö¥Î°úÎìú Ìï®Ïàò
# ============================
def download_youtube_video(url: str, out_dir: str = "downloads", out_name: str = "video.mp4") -> str:
    """
    Ïú†ÌäúÎ∏å ÏòÅÏÉÅÏùÑ MP4Î°ú Îã§Ïö¥Î°úÎìúÌïòÍ≥† ÌååÏùº Í≤ΩÎ°úÎ•º Î∞òÌôòÌï©ÎãàÎã§.
    ÎèôÏùº Ïù¥Î¶ÑÏù¥ ÏûàÏúºÎ©¥ ÎçÆÏñ¥ÏîÅÎãàÎã§.
    """
    os.makedirs(out_dir, exist_ok=True)
    out_path = os.path.join(out_dir, out_name)

    ydl_opts = {
        # mp4 Ïö∞ÏÑ†, Ïïà ÎêòÎ©¥ Í∞ÄÏû• Ï¢ãÏùÄ Ìè¨Îß∑
        "format": "bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4/best",
        "merge_output_format": "mp4",
        "outtmpl": out_path,
        "overwrites": True,
        "quiet": True,
        "noprogress": False,
    }

    print(f"‚¨áÔ∏è  Ïú†ÌäúÎ∏å ÏòÅÏÉÅ Îã§Ïö¥Î°úÎìú Ï§ë...\nURL: {url}")
    with YoutubeDL(ydl_opts) as ydl:
        ydl.download([url])

    if not os.path.exists(out_path):
        raise FileNotFoundError("ÎèôÏòÅÏÉÅ Îã§Ïö¥Î°úÎìúÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
    print(f"‚úÖ Îã§Ïö¥Î°úÎìú ÏôÑÎ£å: {out_path}")
    return out_path


# ============================
# ‚úã MediaPipe Hands Ï¥àÍ∏∞Ìôî
# ============================
mp_hands = mp.solutions.hands
mp_draw = mp.solutions.drawing_utils
mp_style = mp.solutions.drawing_styles

def run_hand_detector(video_path: str):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        print("‚ö†Ô∏è ÏòÅÏÉÅÏùÑ Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§. Í≤ΩÎ°úÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî:", video_path)
        return

    # ÏÑ±Îä• ÏµúÏ†ÅÌôî ÏòµÏÖò (ÌïÑÏöî Ïãú Ï°∞Ï†ï)
    hands = mp_hands.Hands(
        static_image_mode=False,        # ÎèôÏòÅÏÉÅ Ïä§Ìä∏Î¶º
        max_num_hands=2,               # ÏµúÎåÄ ÏÜê Í∞úÏàò
        min_detection_confidence=0.5,  # ÌÉêÏßÄ Ïã†Î¢∞ÎèÑ
        min_tracking_confidence=0.5    # Ï∂îÏ†Å Ïã†Î¢∞ÎèÑ
    )

    print("‚ñ∂Ô∏è  Ïû¨ÏÉù/Î∂ÑÏÑù ÏãúÏûë ‚Äî Ï∞ΩÏóêÏÑú Q ÎòêÎäî ESCÎ°ú Ï¢ÖÎ£å")
    while True:
        ok, frame = cap.read()
        if not ok:
            break

        # BGR -> RGB
        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # ÏÜê ÌÉêÏßÄ
        result = hands.process(rgb)

        # Í≤∞Í≥º Í∑∏Î¶¨Í∏∞
        if result.multi_hand_landmarks:
            for hand_lms in result.multi_hand_landmarks:
                mp_draw.draw_landmarks(
                    frame,
                    hand_lms,
                    mp_hands.HAND_CONNECTIONS,
                    mp_style.get_default_hand_landmarks_style(),
                    mp_style.get_default_hand_connections_style()
                )

        cv2.imshow("üñê MediaPipe Hand Detector (YouTube)", frame)
        key = cv2.waitKey(1) & 0xFF
        if key in (27, ord('q'), ord('Q')):
            break

    cap.release()
    cv2.destroyAllWindows()
    hands.close()


def main():
    if len(sys.argv) < 2:
        print("ÏÇ¨Ïö©Î≤ï: python hand_detector_youtube.py \"https://www.youtube.com/watch?v=...\"")
        sys.exit(1)

    url = sys.argv[1].strip()
    try:
        video_path = download_youtube_video(url)
        run_hand_detector(video_path)
    except Exception as e:
        print("ÏóêÎü¨:", e)
        sys.exit(1)

if __name__ == "__main__":
    main()
